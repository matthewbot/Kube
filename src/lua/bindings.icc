#include "lua/PointerWrapper.h"
#include "util/templates.h"

#include <typeinfo>
#include <type_traits>
#include <memory>
#include <utility>
#include <functional>
#include <stdexcept>

// pushCValue
namespace detail {
    template <typename T>
    struct IsReferenceWrapper : public std::false_type { };

    template <typename T>
    struct IsReferenceWrapper<std::reference_wrapper<T>> : public std::true_type { };
    
    template <typename T, typename = void>
    struct PushCValue {
        static void exec(lua_State *, const T &) {
            static_assert(sizeof(T) != sizeof(T),
                          "Type T is not a CValue");
        }
    };
    
    template <>
    struct PushCValue<std::string> {
        static void exec(lua_State *L, const std::string &val) {
            lua_pushlstring(L, val.c_str(), val.length());
        }
    };

    template <>
    struct PushCValue<bool> {
        static void exec(lua_State *L, bool val) {
            lua_pushboolean(L, val);
        }
    };

    template <>
    struct PushCValue<std::nullptr_t> {
        static void exec(lua_State *L, std::nullptr_t) {
            lua_pushnil(L);
        }
    };
    
    template <typename T>
    struct PushCValue<T, typename std::enable_if<std::is_floating_point<T>::value>::type> {
        static void exec(lua_State *L, T val) {
            lua_pushnumber(L, static_cast<lua_Number>(val));
        }
    };
            
    template <typename T>
    struct PushCValue<T, typename std::enable_if<std::is_integral<T>::value ||
                                                 std::is_enum<T>::value>::type> {
        static void exec(lua_State *L, T val) {
            lua_pushinteger(L, static_cast<lua_Integer>(val));
        }
    };

    template <typename T>
    struct PushCValue<T, typename std::enable_if<std::is_class<T>::value &&
                                                 !IsPointerWrapperType<T>::value &&
                                                 !IsReferenceWrapper<T>::value>::type> {
        static void exec(lua_State *L, const T &val) {
            PointerWrapper<T>::push(L, std::unique_ptr<T>{new T(val)});
        }
    };

    template <typename T>
    struct PushCValue<std::reference_wrapper<T>,
                      typename std::enable_if<std::is_class<T>::value &&
                                              !IsPointerWrapperType<T>::value>::type> {
        static void exec(lua_State *L, std::reference_wrapper<T> val) {
            PointerWrapper<T>::push(L, &val.get());
        }
    };
    
    template <typename T>
    struct PushCValue<T, typename std::enable_if<IsPointerWrapperType<T>::value>::type> {
        template <typename Tf>
        static void exec(lua_State *L, Tf &&val) {
            using Wrapper = typename IsPointerWrapperType<T>::Wrapper;
            Wrapper::push(L, std::forward<Tf>(val));
        }
    };
}

template <typename T>
void pushCValue(lua_State *L, T &&val) {
    detail::template PushCValue<typename std::decay<T>::type>
        ::exec(L, std::forward<T>(val));
}

// pushCValues
namespace detail {
    inline void pushCValuesHelper(lua_State *L) { }

    template <typename T, typename... Ts>
    void pushCValuesHelper(lua_State *L, T &&val, Ts &&... vals) {
        pushCValue(L, std::forward<T>(val));
        pushCValues(L, std::forward<Ts>(vals)...);
    }
}

template <typename... Ts>
void pushCValues(lua_State *L, Ts &&... vals) {
    detail::pushCValuesHelper(L, std::forward<Ts>(vals)...);
}

// toCValue
namespace detail {
    template <typename T>
    void throwException(int argn, std::string msg = std::string{}) {
        auto &expected = typeid(typename std::decay<T>::type);
        throw ToCValueException(argn, expected, std::move(msg));
    }
    
    template <typename T, typename = void>
    struct ToCValue {
        static T exec(lua_State *, int) {
            static_assert(sizeof(T) != sizeof(T),
                          "Type T is not a CValue");
        }
    };
    
    template <>
    struct ToCValue<std::string> {
        static std::string exec(lua_State *L, int index) {
            if (lua_type(L, index) != LUA_TSTRING) {
                throwException<std::string>(index);
            }
            
            size_t len;
            auto cptr = lua_tolstring(L, index, &len);
            return { cptr, len };
        }
    };

    template <>
    struct ToCValue<bool> {
        static bool exec(lua_State *L, int index) {
            if (lua_type(L, index) != LUA_TBOOLEAN) {
                throwException<bool>(index);
            }

            return lua_toboolean(L, index) != 0;
        }
    };

    template <typename T>
    struct ToCValue<T, typename std::enable_if<std::is_floating_point<T>::value>::type> {
        static T exec(lua_State *L, int index) {
            if (lua_type(L, index) != LUA_TNUMBER) {
                throwException<T>(index);
            }

            return static_cast<T>(lua_tonumber(L, index));
        }
    };

    template <typename T>
    struct ToCValue<T, typename std::enable_if<std::is_integral<T>::value ||
                                               std::is_enum<T>::value>::type> {
        static T exec(lua_State *L, int index) {
            if (lua_type(L, index) != LUA_TNUMBER) {
                throwException<T>(index);
            }

            return static_cast<T>(lua_tointeger(L, index));
        }
    };

    template <typename T>
    struct ToCValue<T, typename std::enable_if<std::is_class<T>::value &&
                                               !IsPointerWrapperType<T>::value>::type> {
        static T exec(lua_State *L, int index) {
            return ToCValue<const T &>::exec(L, index);
        }
    };
    
    template <typename T>
    struct ToCValue<T &, typename std::enable_if<std::is_class<T>::value &&
                                                 !IsPointerWrapperType<T>::value &&
                                                 !std::is_const<T>::value>::type> {
        static T &exec(lua_State *L, int index) {
            auto wrapptr = PointerWrapper<T>::to(L, index);
            if (!wrapptr) {
                throwException<T>(index);
            }
                
            auto ptr = wrapptr->get();
            if (!ptr) {
                throwException<T>(index, "PointerWrapper holds null");
            }

            return *ptr;
        }        
    };

    template <typename T>
    struct ToCValue<const T &, typename std::enable_if<std::is_class<T>::value &&
                                                       !IsPointerWrapperType<T>::value>::type> {
        static const T &exec(lua_State *L, int index) {
            auto wrapptr = PointerWrapper<const T>::to(L, index);
            if (!wrapptr) {
                // const references can accept non-const pointer wrappers,
                // so try converting to a regular reference before failing.
                return ToCValue<T &>::exec(L, index);
            }
                
            auto ptr = wrapptr->get();
            if (!ptr) {
                throwException<T>(index, "PointerWrapper holds null");
            }

            return *ptr;
        }        
    };
    
    template <typename T>
    struct ToCValue<T, typename std::enable_if<IsPointerWrapperType<T>::value &&
                                               !std::is_pointer<T>::value>::type> {
        static T exec(lua_State *L, int index) {
            if (lua_isnil(L, index)) {
                return nullptr;
            }

            return copyOrMove(ToCValue<T &>::exec(L, index));
        }
    };

    template <typename T>
    struct ToCValue<T *, typename std::enable_if<std::is_class<T>::value &&
                                                 !IsPointerWrapperType<T>::value>::type> {
        static T *exec(lua_State *L, int index) {
            if (lua_isnil(L, index)) {
                return nullptr;
            }

            return &ToCValue<T &>::exec(L, index);
        }
    };

    template <typename T>
    struct ToCValue<T &, typename std::enable_if<IsPointerWrapperType<T>::value>::type> {
        static T &exec(lua_State *L, int index) {
            using Wrapper = typename IsPointerWrapperType<T>::Wrapper;
            auto wrapptr = Wrapper::to(L, index);
            if (!wrapptr) {
                throwException<T>(index);
            }

            using TPtr = typename std::remove_const<T>::type;
            auto ptrptr = wrapptr->template getPtr<TPtr>();
            if (!ptrptr) {
                throwException<T>(index, "PointerWrapper holds wrong pointer type");
            }
            
            return *ptrptr;
        }
    };
}

template <typename T>
T toCValue(lua_State *L, int index) {
    return detail::template ToCValue<T>::exec(L, index);
}

namespace detail {
    template <typename... Ts, size_t... Seq>
    std::tuple<Ts...> toCValuesHelper(lua_State *L,
                                      int narg,
                                      NumericSequence<Seq...>) {
        return std::tuple<Ts...>{toCValue<Ts>(L, narg+Seq)...};
    }
}

template <typename... Ts>
std::tuple<Ts...> toCValues(lua_State *L, int narg) {
    using Seq = typename AscendingSequence<sizeof...(Ts)>::seq; 
    return detail::toCValuesHelper<Ts...>(L, narg, Seq());
}

namespace detail {
    template <typename T>
    struct ArgsToCValues {
        using type = T;
    };

    template <typename T>
    struct ArgsToCValues<const T &> {
        using type = typename std::conditional<
            std::is_same<T, bool>::value
            || std::is_same<T, std::string>::value
            || std::is_arithmetic<T>::value
            || IsPointerWrapperType<T>::value,
            T, // Remove const & on built-in lua types and pointer types
            const T &>::type;
    };

    template <typename Result, typename Callable, typename... CValues, size_t... Nums>
    Result invokeWithLuaArgsHelper(lua_State *L,
                                   int narg,
                                   Callable &&call,
                                   TypeSequence<CValues...>,
                                   NumericSequence<Nums...>) {
        return std::forward<Callable>(call)(toCValue<CValues>(L, narg+Nums)...);
    }
}

template <typename... Args, typename Callable>
auto invokeWithLuaArgs(lua_State *L, int narg, Callable &&call) ->
    typename std::result_of<Callable(Args...)>::type
{
    using CValuesSeq = typename MapTypeSequence<detail::ArgsToCValues, Args...>::seq;
    using NumsSeq = typename AscendingSequence<sizeof...(Args)>::seq;
    using Result = typename std::result_of<Callable(Args...)>::type;
    return detail::invokeWithLuaArgsHelper<Result>(L,
                                                   narg,
                                                   std::forward<Callable>(call),
                                                   CValuesSeq(),
                                                   NumsSeq());
}
