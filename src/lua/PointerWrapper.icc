#include <stdexcept>

template <typename T>
struct IsPointerWrapperType : public std::false_type { };

template <typename T>
struct IsPointerWrapperType<const T> : public IsPointerWrapperType<T> { };

template <typename T>
struct IsPointerWrapperType<T *> : public std::true_type {
    using Wrapper = PointerWrapper<T>;
};

template <typename T>
struct IsPointerWrapperType<std::shared_ptr<T>> : public std::true_type {
    using Wrapper = PointerWrapper<T>;
};

template <typename T>
struct IsPointerWrapperType<std::unique_ptr<T>> : public std::true_type {
    using Wrapper = PointerWrapper<T>;
};

template <typename T> template <typename TPtr>
void PointerWrapper<T>::push(lua_State *L, TPtr &&ptr) {
    if (!ptr) {
        lua_pushnil(L);
        return;
    }

    void *mem = lua_newuserdata(L, sizeof(PointerWrapper<T>));
    new (mem) PointerWrapper{std::forward<TPtr>(ptr)};
    luaL_getmetatable(L, getMetatableName().c_str());
    if (lua_isnil(L, -1)) {
        throw std::runtime_error("No metatable for pushing type");
    }
    lua_setmetatable(L, -2);
}

template <typename T>
PointerWrapper<T> *PointerWrapper<T>::to(lua_State *L, int index) {
    LuaStackFrame frame{L};

    void *ud = lua_touserdata(L, index);
    if (!ud) {
        return nullptr;
    }
    if (!lua_getmetatable(L, index)) {
        return nullptr;
    }

    luaL_getmetatable(L, getMetatableName().c_str());
    bool match = lua_rawequal(L, frame+1, frame+2);
    
    if (!match) {
        return nullptr;
    }

    return reinterpret_cast<PointerWrapper<T> *>(ud);
}

template <typename T>
T *PointerWrapper<T>::get() {
    return ptrvar.template match<T *>(
        [](T *ptr) { return ptr; },
        [](const std::shared_ptr<T> &ptr) { return ptr.get(); },
        [](const std::unique_ptr<T> &ptr) { return ptr.get(); });
}

template <typename T> template <typename TPtr>
TPtr *PointerWrapper<T>::getPtr() {
    return ptrvar.template getPtr<TPtr>();
}

template <typename T> template <typename U>
void PointerWrapper<T>::pushStaticCast(lua_State *L) {    
    ptrvar.template match<void>(
        [&](T *ptr) {
            PointerWrapper<U>::push(L, static_cast<U *>(ptr));
        },
        [&](const std::shared_ptr<T> &shptr) {
            PointerWrapper<U>::push(L, std::static_pointer_cast<U>(shptr));
        },
        [&](std::unique_ptr<T> &uptr) {
            // if we're a unique pointer, we have to convert ourselves to shared
            std::shared_ptr<T> shptr{std::move(uptr)};
            ptrvar = shptr;
            PointerWrapper<U>::push(L, std::static_pointer_cast<U>(shptr));
        });
}

template <typename T>
const std::string &PointerWrapper<T>::getMetatableName() {
    static const std::string name =
        std::string{std::is_const<T>::value ? "UD_C_" : "UD_"} + typeid(T).name();
    return name;
}
